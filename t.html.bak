// termux-web.js
import express from 'express';
import { exec } from 'child_process';

const app = express();
app.use(express.json());

// HTML completo con terminal avanzada
app.get('/', (req, res) => {
  res.send(`
<!DOCTYPE html>
<html lang="es">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Termux Web Ultra</title>
<style>
body { margin:0; padding:0; font-family: monospace; background:#000; color:#0f0; display:flex; justify-content:center; align-items:center; height:100vh; }
#terminal { width:90%; max-width:900px; height:85%; background:#111; border-radius:8px; padding:10px; overflow-y:auto; }
.line { display:flex; flex-wrap:wrap; }
.prompt { margin-right:5px; }
input { background:none; border:none; outline:none; color:#0f0; flex:1; }
.loading { color: #ff0; }
.error { color: #f00; }
.success { color: #0ff; }
</style>
</head>
<body>
<div id="terminal">
  <div class="line"><span class="prompt">user@webterm:~$</span><input id="cmdInput" autofocus placeholder="Escribe un comando..."></div>
</div>

<script>
const terminal = document.getElementById('terminal');
const input = document.getElementById('cmdInput');
let history = [];
let historyIndex = -1;
const commands = ['git clone', 'ls', 'pwd', 'npm install', 'node', 'clear'];

function addLine(content, cls='') {
  const line = document.createElement('div');
  line.className = 'line ' + cls;
  line.textContent = content;
  terminal.appendChild(line);
  terminal.scrollTop = terminal.scrollHeight;
}

input.addEventListener('keydown', async (e) => {
  if (e.key === 'Enter') {
    const cmd = input.value.trim();
    if (!cmd) return;

    addLine('user@webterm:~$ ' + cmd);
    history.push(cmd);
    historyIndex = history.length;

    input.value = '';

    if (cmd === 'clear') {
      terminal.innerHTML = '';
      return;
    }

    if (!commands.some(c => cmd.startsWith(c))) {
      addLine('Comando no permitido.', 'error');
      return;
    }

    if(cmd.startsWith('git clone') || cmd.startsWith('npm install')){
      addLine('Ejecutando ' + cmd + '...', 'loading');
    }

    try {
      const res = await fetch('/run', {
        method: 'POST',
        headers: {'Content-Type':'application/json'},
        body: JSON.stringify({ command: cmd })
      });
      const text = await res.text();
      addLine(text, 'success');
    } catch(err) {
      addLine('Error: ' + err.message, 'error');
    }
  }
  // Navegar historial con flechas
  if(e.key === 'ArrowUp') {
    if(historyIndex > 0) historyIndex--;
    input.value = history[historyIndex] || '';
  }
  if(e.key === 'ArrowDown') {
    if(historyIndex < history.length - 1) historyIndex++;
    input.value = history[historyIndex] || '';
  }
  // Autocompletado TAB
  if(e.key === 'Tab') {
    e.preventDefault();
    const value = input.value;
    const match = commands.find(c => c.startsWith(value));
    if(match) input.value = match;
  }
});
</script>
</body>
</html>
  `);
});

// Ejecutar comandos seguros
app.post('/run', (req, res) => {
  const { command } = req.body;
  const allowed = ['git clone', 'ls', 'pwd', 'npm install', 'node'];

  if (!allowed.some(c => command.startsWith(c))) {
    return res.status(400).send('Comando no permitido');
  }

  exec(command, { maxBuffer: 1024*1024 }, (error, stdout, stderr) => {
    if(error) return res.status(500).send(stderr || error.message);
    res.send(stdout || 'Comando ejecutado correctamente');
  });
});

app.listen(3000, () => console.log('Servidor corriendo en http://localhost:3000'));
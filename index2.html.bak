<!DOCTYPE html>
<html lang="es">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width,initial-scale=1">
<title>GitHub Stats ‚Äî Terminal Look</title>
<link href="https://fonts.googleapis.com/css2?family=Fira+Code&display=swap" rel="stylesheet">
<style>
:root{
  --bg:#0d1117;
  --card:#161b22;
  --accent:#58a6ff;
  --muted:#8b949e;
}
*{box-sizing:border-box}
body{
  margin:0;
  font-family:'Fira Code', monospace;
  background:#0d1117;
  color:#c9d1d9;
  min-height:100vh;
  display:flex;
  justify-content:center;
  align-items:flex-start;
  padding:20px;
  flex-direction:column;
  overflow:hidden;
  position:relative;
}
canvas#bgCanvas{
  position:fixed;
  top:0; left:0;
  width:100%; height:100%;
  z-index:-1;
}
.wrap{
  display:grid;
  grid-template-columns: 1fr 360px;
  gap:20px;
  max-width:1000px;
  width:100%;
}
.card{
  background: var(--card);
  border-radius:15px;
  padding:20px;
  box-shadow:0 10px 30px rgba(0,0,0,0.5);
  border:1px solid rgba(255,255,255,0.05);
  backdrop-filter: blur(6px);
  transition:transform .3s ease,opacity .3s ease;
}
.card:hover{transform:scale(1.02);}
header h1{margin:0;font-size:22px;color:#fff;}
header p{margin:4px 0 12px 0;color:var(--muted);font-size:14px;}

/* Spinner */
.spinner-wrap{
  display:flex;
  align-items:center;
  gap:14px;
  margin:20px 0;
}
.wheel{
  width:80px;
  height:80px;
  border-radius:50%;
  background: conic-gradient(from 0deg, rgba(88,166,255,0.1) 0deg, rgba(88,166,255,0.25) 40deg, rgba(88,166,255,0.1) 80deg);
  animation: spin 1s linear infinite;
  border:6px solid rgba(255,255,255,0.05);
  box-shadow: inset 0 0 12px rgba(0,0,0,0.4),0 6px 15px rgba(0,0,0,0.4);
  position:relative;
}
.wheel::after{
  content:"";
  position:absolute;
  inset:18%;
  border-radius:50%;
  background: radial-gradient(circle at 50% 50%, rgba(88,166,255,0.15), transparent 25%), rgba(0,0,0,0.4);
}
@keyframes spin{from{transform:rotate(0deg);} to{transform:rotate(360deg);}}

.status{font-size:14px;color:var(--muted);}
.repo-grid{
  display:flex;
  gap:12px;
  align-items:center;
  margin-top:10px;
}
.avatar{
  width:70px;
  height:70px;
  border-radius:12px;
  overflow:hidden;
  flex-shrink:0;
  display:flex;
  align-items:center;
  justify-content:center;
  border:1px solid rgba(255,255,255,0.05);
}
.avatar img{width:100%;height:100%;object-fit:cover;}
.repo-info h2{margin:0;font-size:18px;}
.repo-info p{margin:4px 0;color:var(--muted);font-size:13px;}
.stats{
  display:flex;
  flex-wrap:wrap;
  gap:10px;
  margin-top:10px;
}
.stat{
  background: rgba(255,255,255,0.02);
  padding:6px 10px;
  border-radius:10px;
  font-size:13px;
  color:var(--muted);
  display:flex;gap:6px;align-items:center;
  border:1px solid rgba(255,255,255,0.02);
}
.stat b{color:#c9d1d9;font-weight:600;}

.right{position:sticky;top:20px;height:fit-content;}
label{font-size:13px;color:var(--muted);display:block;margin-bottom:8px;}
input[type="text"]{
  width:100%;padding:10px 12px;border-radius:10px;border:1px solid rgba(255,255,255,0.05);
  background:transparent;color:inherit;font-size:14px;
}
.btn{
  margin-top:10px;padding:10px 12px;border-radius:10px;border:none;background:linear-gradient(90deg,var(--accent), #1f6feb);
  color:white;font-weight:600;cursor:pointer;width:100%;
  box-shadow:0 6px 15px rgba(88,166,255,0.2);
  transition:all .2s ease;
}
.btn:hover{transform:scale(1.02);}
.small{font-size:12px;color:var(--muted);margin-top:10px;}
.link{color:var(--accent);font-weight:600;text-decoration:none;}
footer{
  margin-top:20px;
  text-align:center;
  color:var(--muted);
  font-size:13px;
  border-top:1px solid rgba(255,255,255,0.05);
  padding-top:10px;
}
.error{color:#ff6b6b;font-weight:600;margin-top:8px;font-size:13px;}
@media(max-width:900px){.wrap{grid-template-columns:1fr}.right{position:static}}
@keyframes fadeIn{from{opacity:0;transform:translateY(10px);}to{opacity:1;transform:translateY(0);}}
</style>
</head>
<body>
<canvas id="bgCanvas"></canvas>

<div class="wrap">
  <div class="card">
    <header>
      <h1>Estad√≠sticas GitHub</h1>
      <p>Visualiza datos de repositorios en tiempo real con estilo moderno y animaciones.</p>
    </header>

    <div class="spinner-wrap" id="loadingPanel">
      <div class="wheel" id="wheel"></div>
      <div>
        <div class="status" id="loadingText">Conectando a GitHub‚Ä¶</div>
        <div style="margin-top:6px;color:var(--muted);font-size:13px">Cargando estad√≠sticas y miniaturas...</div>
      </div>
    </div>

    <section id="reposContainer" style="opacity:0;transition:opacity .25s ease"></section>

  </div>

  <aside class="card right">
    <label for="repoInput">Cargar otro repositorio</label>
    <input id="repoInput" type="text" placeholder="usuario/repositorio (ej: Yuji-XDev/Rin-Itoshi-Bot)">
    <button class="btn" id="fetchBtn">Cargar repo</button>
    <div class="small" style="margin-top:12px">Preconfigurado: <code>Yuji-XDev/Rin-Itoshi-Bot</code></div>
    <div id="errorBox" class="error" style="display:none"></div>
  </aside>
</div>

<footer>
  ‚ú¶ 2025 ‚Ä¢ Estad√≠sticas GitHub ‚Ä¢ Hecho con ‚ù§Ô∏è por <a href="https://github.com/Yuji-XDev" class="link" target="_blank">Yuji-XDev</a>
</footer>

<script>
// Fondo ne√≥n din√°mico con cursor
const canvas=document.getElementById('bgCanvas');
const ctx=canvas.getContext('2d');
let w,h;
function resize(){w=canvas.width=window.innerWidth;h=canvas.height=window.innerHeight;}
window.addEventListener('resize',resize);resize();

const mouse={x:w/2,y:h/2};
window.addEventListener('mousemove',e=>{mouse.x=e.clientX;mouse.y=e.clientY;});

const particles=[];
const PARTICLE_COUNT=100;
for(let i=0;i<PARTICLE_COUNT;i++){
  particles.push({
    x:Math.random()*w,
    y:Math.random()*h,
    r:Math.random()*1.5+1,
    vx:(Math.random()-0.5)*0.5,
    vy:(Math.random()-0.5)*0.5,
    hue:Math.random()*360
  });
}

function animate(){
  ctx.fillStyle='rgba(13,17,23,0.3)';
  ctx.fillRect(0,0,w,h);
  for(let p of particles){
    // Movimiento suave
    p.x+=p.vx; p.y+=p.vy;
    if(p.x<0||p.x>w)p.vx*=-1;
    if(p.y<0||p.y>h)p.vy*=-1;

    // Atracci√≥n hacia cursor
    const dx=mouse.x-p.x;
    const dy=mouse.y-p.y;
    const dist=Math.sqrt(dx*dx+dy*dy);
    if(dist<120){
      p.x+=dx*0.002;
      p.y+=dy*0.002;
    }

    // Dibujar punto
    ctx.beginPath();
    ctx.arc(p.x,p.y,p.r,0,Math.PI*2);
    ctx.fillStyle=`hsl(${p.hue},80%,60%)`;
    ctx.fill();
  }

  // L√≠neas conectando part√≠culas cercanas
  for(let i=0;i<particles.length;i++){
    for(let j=i+1;j<particles.length;j++){
      const dx=particles[i].x-particles[j].x;
      const dy=particles[i].y-particles[j].y;
      const dist=Math.sqrt(dx*dx+dy*dy);
      if(dist<100){
        ctx.beginPath();
        ctx.moveTo(particles[i].x,particles[i].y);
        ctx.lineTo(particles[j].x,particles[j].y);
        const alpha=(100-dist)/100*0.3;
        ctx.strokeStyle=`hsla(${particles[i].hue},80%,60%,${alpha})`;
        ctx.lineWidth=1;
        ctx.stroke();
      }
    }
  }

  requestAnimationFrame(animate);
}
animate();

// GitHub repos (igual que antes)
const initialRepos=["Yuji-XDev/Rin-Itoshi-Bot"];
const reposContainer=document.getElementById('reposContainer');
const loadingPanel=document.getElementById('loadingPanel');
const loadingText=document.getElementById('loadingText');
const errorBox=document.getElementById('errorBox');

function escapeHtml(s){return String(s).replaceAll('&','&amp;').replaceAll('<','&lt;').replaceAll('>','&gt;');}
function num(n){return (n===null||n===undefined)?'0':n.toLocaleString();}

function makeRepoCard(data){
  const updated=new Date(data.updated_at).toLocaleString();
  return `<div style="margin-top:14px;padding:12px;border-radius:12px;background:rgba(255,255,255,0.02);border:1px solid rgba(255,255,255,0.02);animation:fadeIn .5s;">
    <div class="repo-grid">
      <div class="avatar"><img src="${data.owner.avatar_url}" alt="avatar"></div>
      <div class="repo-info" style="flex:1">
        <h2>${escapeHtml(data.full_name)}</h2>
        <p>${escapeHtml(data.description||'‚Äî sin descripci√≥n ‚Äî')}</p>
        <div class="stats">
          <div class="stat">‚≠ê <b>${num(data.stargazers_count)}</b> Stars</div>
          <div class="stat">üç¥ <b>${num(data.forks_count)}</b> Forks</div>
          <div class="stat">üëÅÔ∏è <b>${num(data.watchers_count)}</b> Watchers</div>
          <div class="stat">üêû <b>${num(data.open_issues_count)}</b> Issues</div>
          <div class="stat">üß© <b>${escapeHtml(data.language||'‚Äî')}</b></div>
        </div>
        <div style="margin-top:10px;font-size:12px;color:var(--muted)">
        √öltima actualizaci√≥n: ${updated}</div>
        <div style="margin-top:10px;display:flex;gap:6px;align-items:center">
          <a class="link" href="${data.html_url}" target="_blank" rel="noopener">Ver en GitHub ‚Üí</a>
          <button onclick="navigator.clipboard.writeText('${data.html_url}')" style="font-size:11px;padding:2px 6px;border-radius:6px;background:var(--accent);border:none;color:#fff;cursor:pointer;">Copiar URL</button>
        </div>
      </div>
    </div>
  </div>`;
}

async function fetchRepo(repoFullName){
  const api=`https://api.github.com/repos/${repoFullName}`;
  const res=await fetch(api,{headers:{'Accept':'application/vnd.github.v3+json'}});
  if(!res.ok) throw new Error(`Error ${res.status}: ${res.statusText}`);
  return res.json();
}

async function loadInitial(){
  try{
    loadingText.textContent="Solicitando datos del repositorio‚Ä¶";
    reposContainer.innerHTML='';
    const results=[];
    for(const r of initialRepos){
      loadingText.textContent=`Cargando ${r}...`;
      const data=await fetchRepo(r);
      results.push(data);
    }
    reposContainer.innerHTML=results.map(d=>makeRepoCard(d)).join('');
    loadingPanel.style.display='none';
    reposContainer.style.opacity=1;
  }catch(err){
    loadingText.textContent='No se pudo cargar. Revisa la consola.';
    console.error(err);
    errorBox.style.display='block';
    errorBox.textContent='Error cargando repos iniciales: '+err.message;
  }
}

document.getElementById('fetchBtn').addEventListener('click', async ()=>{
  const input=document.getElementById('repoInput').value.trim();
  errorBox.style.display='none';
  if(!input){
    errorBox.style.display='block';
    errorBox.textContent='Escribe el repo en formato usuario/repositorio.';
    return;
  }
  loadingPanel.style.display='flex';
  loadingPanel.style.opacity='1';
  loadingText.textContent='Cargando tu repositorio...';
  reposContainer.style.opacity=0.3;

  try{
    const data=await fetchRepo(input);
    const newHtml=makeRepoCard(data);
    reposContainer.insertAdjacentHTML('afterbegin',newHtml);
    loadingPanel.style.display='none';
    reposContainer.style.opacity=1;
  }catch(err){
    console.error(err);
    loadingPanel.style.display='none';
    reposContainer.style.opacity=1;
    errorBox.style.display='block';
    if(err.message.includes('404')) errorBox.textContent='Repositorio no encontrado. ¬øUsaste el formato correcto (usuario/repositorio)?';
    else if(err.message.includes('403')) errorBox.textContent='L√≠mite de la API de GitHub alcanzado. Intenta con un token o espera unos minutos.';
    else errorBox.textContent='Error: '+err.message;
  }
});

loadInitial();
</script>
</body>
</html>